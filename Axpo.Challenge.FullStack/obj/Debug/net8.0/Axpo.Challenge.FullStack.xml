<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Axpo.Challenge.FullStack</name>
    </assembly>
    <members>
        <member name="T:Axpo.Challenge.FullStack.Controllers.BalancingController">
            <summary>
            Handles requests related to balancing circles and forecasts.
            </summary>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Controllers.BalancingController.#ctor(Axpo.Challenge.FullStack.Services.IBalancingService,Microsoft.Extensions.Logging.ILogger{Axpo.Challenge.FullStack.Controllers.BalancingController})">
            <summary>
            Initializes a new instance of the <see cref="T:Axpo.Challenge.FullStack.Controllers.BalancingController"/> class.
            </summary>
            <param name="balancingService">The service to handle balancing operations.</param>
            <param name="logger">The logger for this controller.</param>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Controllers.BalancingController.GetBalancingCircles">
            <summary>
            Retrieves a list of all balancing circles.
            </summary>
            <returns>A list of <see cref="T:Axpo.Challenge.FullStack.Models.Domain.BalancingCircle"/> objects.</returns>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Controllers.BalancingController.GetMemberForecast(System.Int32)">
            <summary>
            Retrieves forecast data for a specific member.
            </summary>
            <param name="memberId">The ID of the member for whom to retrieve forecast data.</param>
            <returns>A list of forecast data for the specified member, or a 404 Not Found result if none exist.</returns>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Controllers.BalancingController.GetImbalances(System.Int32)">
            <summary>
            Retrieves imbalances for a specific balancing circle.
            </summary>
            <param name="id">The ID of the balancing circle for which to calculate imbalances.</param>
            <returns>A dictionary of imbalances for the specified balancing circle, or an appropriate error result.</returns>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext">
            <summary>
            Represents the database context for energy balance operations.
            </summary>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext"/> class.
            </summary>
            <param name="options">The options to be used by the DbContext.</param>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext.BalancingCircles">
            <summary>
            Gets or sets the DbSet for balancing circles.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext.Forecasts">
            <summary>
            Gets or sets the DbSet for forecast data.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext.Members">
            <summary>
            Gets or sets the DbSet for members.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext.TimeseriesEntries">
            <summary>
            Gets or sets the DbSet for timeseries entries.
            </summary>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the entity relationships and other configurations.
            </summary>
            <param name="modelBuilder">The model builder to be used for configuration.</param>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Extensions.SwaggerExtensions">
            <summary>
            Provides extension methods for configuring Swagger.
            </summary>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Extensions.SwaggerExtensions.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Swagger configuration to the service collection.
            </summary>
            <param name="services">The service collection.</param>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Extensions.SwaggerExtensions.IncludeXMLDocs(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Includes XML documentation files in the Swagger configuration.
            </summary>
            <param name="options">The SwaggerGen options.</param>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Migrations.InitialMigration">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.InitialMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.InitialMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.InitialMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Axpo.Challenge.FullStack.Migrations.AddIsProducerAndMemberId">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.AddIsProducerAndMemberId.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.AddIsProducerAndMemberId.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.AddIsProducerAndMemberId.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Axpo.Challenge.FullStack.Migrations.SyncSchema">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.SyncSchema.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.SyncSchema.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.SyncSchema.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Axpo.Challenge.FullStack.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Axpo.Challenge.FullStack.Migrations.AddForecastData">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.AddForecastData.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.AddForecastData.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Axpo.Challenge.FullStack.Migrations.AddForecastData.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Axpo.Challenge.FullStack.Models.Domain.BalancingCircle">
            <summary>
            Represents a balancing circle, which groups multiple members together.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.BalancingCircle.Id">
            <summary>
            Gets or sets the unique identifier for the balancing circle.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.BalancingCircle.Name">
            <summary>
            Gets or sets the name of the balancing circle.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.BalancingCircle.Members">
            <summary>
            Gets or sets the collection of members that belong to the balancing circle.
            A balancing circle can contain multiple members.
            </summary>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Models.Domain.ForecastData">
            <summary>
            Represents the forecast data for a member in a balancing circle.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.ForecastData.Id">
            <summary>
            Gets or sets the unique identifier for the forecast data entry.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.ForecastData.MemberId">
            <summary>
            Gets or sets the ID of the member associated with this forecast data.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.ForecastData.Member">
            <summary>
            Gets or sets the member associated with this forecast data.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.ForecastData.Date">
            <summary>
            Gets or sets the date for which the forecast data is recorded.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.ForecastData.Forecast">
            <summary>
            Gets or sets the forecast value for the member on the specified date.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.Id">
            <summary>
            Gets or sets the unique identifier for the member.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.Name">
            <summary>
            Gets or sets the name of the member.
            This is optional and can be null.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.Type">
            <summary>
            Gets or sets the type of the member, either "Producer" or "Consumer".
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.Category">
            <summary>
            Gets or sets the category the member belongs to.
            This describes the type of energy or business, such as "Solar", "Wind", "Retailer", or "Industrials".
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.Forecasts">
            <summary>
            Gets or sets the collection of forecast data related to this member.
            A member can have multiple forecast entries.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.IsProducer">
            <summary>
            Indicates whether the member is a producer of energy.
            If false, the member is considered a consumer.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.BalancingCircleId">
            <summary>
            Gets or sets the identifier of the balancing circle this member belongs to.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.Member.BalancingCircle">
            <summary>
            Gets or sets the balancing circle associated with the member.
            This represents the relationship to the <see cref="P:Axpo.Challenge.FullStack.Models.Domain.Member.BalancingCircle"/> entity.
            </summary>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry">
            <summary>
            Represents an entry in the time series for a member's energy production or consumption data.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry.Id">
            <summary>
            Gets or sets the unique identifier for the time series entry.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry.MemberId">
            <summary>
            Gets or sets the ID of the member associated with this time series entry.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry.Member">
            <summary>
            Gets or sets the <see cref="P:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry.Member"/> entity associated with this time series entry.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry.Date">
            <summary>
            Gets or sets the date and time of the time series entry.
            </summary>
        </member>
        <member name="P:Axpo.Challenge.FullStack.Models.Domain.TimeseriesEntry.Value">
            <summary>
            Gets or sets the energy value (e.g., production or consumption) associated with this time series entry.
            </summary>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Services.BalancingService">
            <summary>
            Service class for managing balancing circles and calculating imbalances.
            </summary>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.BalancingService.#ctor(Axpo.Challenge.FullStack.Data.EnergyBalanceDbContext,Microsoft.Extensions.Logging.ILogger{Axpo.Challenge.FullStack.Services.BalancingService})">
            <summary>
            Constructor for BalancingService.
            </summary>
            <param name="context">Database context to be used by the service.</param>
            <param name="logger">Logger to log information and errors.</param>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.BalancingService.GetBalancingCirclesAsync">
            <inheritdoc/>
            <summary>
            Retrieves all balancing circles along with their members.
            </summary>
            <returns>A list of balancing circles.</returns>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.BalancingService.GetForecastDataForMemberAsync(System.Int32)">
            <summary>
            Retrieves forecast data for a specific member.
            </summary>
            <param name="memberId">The ID of the member for which to retrieve forecast data.</param>
            <returns>A list of forecast data for the specified member.</returns>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.BalancingService.CalculateImbalancesAsync(System.Int32)">
            <summary>
            Calculates imbalances for a specific balancing circle based on its members' forecasts.
            </summary>
            <param name="balancingCircleId">The ID of the balancing circle for which to calculate imbalances.</param>
            <returns>A dictionary where the key is the date and the value is the calculated imbalance.</returns>
        </member>
        <member name="T:Axpo.Challenge.FullStack.Services.IBalancingService">
            <summary>
            Interface for the balancing service, defining methods to manage balancing circles and calculate imbalances.
            </summary>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.IBalancingService.GetBalancingCirclesAsync">
            <summary>
            Asynchronously retrieves all balancing circles from the data source.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of balancing circles.</returns>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.IBalancingService.GetForecastDataForMemberAsync(System.Int32)">
            <summary>
            Asynchronously retrieves forecast data for a specific member based on their ID.
            </summary>
            <param name="memberId">The ID of the member whose forecast data is to be retrieved.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of forecast data for the specified member.</returns>
        </member>
        <member name="M:Axpo.Challenge.FullStack.Services.IBalancingService.CalculateImbalancesAsync(System.Int32)">
            <summary>
            Asynchronously calculates the imbalances for a specific balancing circle based on its members' forecasts.
            </summary>
            <param name="balancingCircleId">The ID of the balancing circle for which to calculate imbalances.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a dictionary where the key is the date and the value is the calculated imbalance.</returns>
        </member>
    </members>
</doc>
